<?php
/**
 * PurchaseCardsLevel2
 *
 * PHP version 5
 *
 * @category Class
 * @package  FirstData\FirstApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.4.0.20210824.002
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FirstData\FirstApi\Client\Model;

use \ArrayAccess;
use \FirstData\FirstApi\Client\ObjectSerializer;

/**
 * PurchaseCardsLevel2 Class Doc Comment
 *
 * @category Class
 * @description Level 2 data for monitoring and controlling corporate expenditures.
 * @package  FirstData\FirstApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PurchaseCardsLevel2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PurchaseCards_Level2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'customerReferenceID' => 'string',
        'supplierInvoiceNumber' => 'string',
        'supplierVATRegistrationNumber' => 'string',
        'totalDiscountAmountAndRate' => '\FirstData\FirstApi\Client\Model\AdditionalAmountRate',
        'vatShippingAmountAndRate' => '\FirstData\FirstApi\Client\Model\AdditionalAmountRate',
        'dutyAmountAndRate' => '\FirstData\FirstApi\Client\Model\AdditionalAmountRate'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'customerReferenceID' => null,
        'supplierInvoiceNumber' => null,
        'supplierVATRegistrationNumber' => null,
        'totalDiscountAmountAndRate' => null,
        'vatShippingAmountAndRate' => null,
        'dutyAmountAndRate' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customerReferenceID' => 'customerReferenceID',
        'supplierInvoiceNumber' => 'supplierInvoiceNumber',
        'supplierVATRegistrationNumber' => 'supplierVATRegistrationNumber',
        'totalDiscountAmountAndRate' => 'totalDiscountAmountAndRate',
        'vatShippingAmountAndRate' => 'vatShippingAmountAndRate',
        'dutyAmountAndRate' => 'dutyAmountAndRate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customerReferenceID' => 'setCustomerReferenceID',
        'supplierInvoiceNumber' => 'setSupplierInvoiceNumber',
        'supplierVATRegistrationNumber' => 'setSupplierVATRegistrationNumber',
        'totalDiscountAmountAndRate' => 'setTotalDiscountAmountAndRate',
        'vatShippingAmountAndRate' => 'setVatShippingAmountAndRate',
        'dutyAmountAndRate' => 'setDutyAmountAndRate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customerReferenceID' => 'getCustomerReferenceID',
        'supplierInvoiceNumber' => 'getSupplierInvoiceNumber',
        'supplierVATRegistrationNumber' => 'getSupplierVATRegistrationNumber',
        'totalDiscountAmountAndRate' => 'getTotalDiscountAmountAndRate',
        'vatShippingAmountAndRate' => 'getVatShippingAmountAndRate',
        'dutyAmountAndRate' => 'getDutyAmountAndRate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customerReferenceID'] = isset($data['customerReferenceID']) ? $data['customerReferenceID'] : null;
        $this->container['supplierInvoiceNumber'] = isset($data['supplierInvoiceNumber']) ? $data['supplierInvoiceNumber'] : null;
        $this->container['supplierVATRegistrationNumber'] = isset($data['supplierVATRegistrationNumber']) ? $data['supplierVATRegistrationNumber'] : null;
        $this->container['totalDiscountAmountAndRate'] = isset($data['totalDiscountAmountAndRate']) ? $data['totalDiscountAmountAndRate'] : null;
        $this->container['vatShippingAmountAndRate'] = isset($data['vatShippingAmountAndRate']) ? $data['vatShippingAmountAndRate'] : null;
        $this->container['dutyAmountAndRate'] = isset($data['dutyAmountAndRate']) ? $data['dutyAmountAndRate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['customerReferenceID']) && (mb_strlen($this->container['customerReferenceID']) > 17)) {
            $invalidProperties[] = "invalid value for 'customerReferenceID', the character length must be smaller than or equal to 17.";
        }

        if (!is_null($this->container['supplierInvoiceNumber']) && (mb_strlen($this->container['supplierInvoiceNumber']) > 30)) {
            $invalidProperties[] = "invalid value for 'supplierInvoiceNumber', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['supplierVATRegistrationNumber']) && (mb_strlen($this->container['supplierVATRegistrationNumber']) > 30)) {
            $invalidProperties[] = "invalid value for 'supplierVATRegistrationNumber', the character length must be smaller than or equal to 30.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customerReferenceID
     *
     * @return string|null
     */
    public function getCustomerReferenceID()
    {
        return $this->container['customerReferenceID'];
    }

    /**
     * Sets customerReferenceID
     *
     * @param string|null $customerReferenceID Customer code/customer reference ID. The max length supported for Visa is 12 and MasterCard is 17.
     *
     * @return $this
     */
    public function setCustomerReferenceID($customerReferenceID)
    {
        if (!is_null($customerReferenceID) && (mb_strlen($customerReferenceID) > 17)) {
            throw new \InvalidArgumentException('invalid length for $customerReferenceID when calling PurchaseCardsLevel2., must be smaller than or equal to 17.');
        }

        $this->container['customerReferenceID'] = $customerReferenceID;

        return $this;
    }

    /**
     * Gets supplierInvoiceNumber
     *
     * @return string|null
     */
    public function getSupplierInvoiceNumber()
    {
        return $this->container['supplierInvoiceNumber'];
    }

    /**
     * Sets supplierInvoiceNumber
     *
     * @param string|null $supplierInvoiceNumber Purchase identifier/merchant-related data.
     *
     * @return $this
     */
    public function setSupplierInvoiceNumber($supplierInvoiceNumber)
    {
        if (!is_null($supplierInvoiceNumber) && (mb_strlen($supplierInvoiceNumber) > 30)) {
            throw new \InvalidArgumentException('invalid length for $supplierInvoiceNumber when calling PurchaseCardsLevel2., must be smaller than or equal to 30.');
        }

        $this->container['supplierInvoiceNumber'] = $supplierInvoiceNumber;

        return $this;
    }

    /**
     * Gets supplierVATRegistrationNumber
     *
     * @return string|null
     */
    public function getSupplierVATRegistrationNumber()
    {
        return $this->container['supplierVATRegistrationNumber'];
    }

    /**
     * Sets supplierVATRegistrationNumber
     *
     * @param string|null $supplierVATRegistrationNumber Merchant VAT registration/single business reference number/merchant tax ID or corporation VAT number.
     *
     * @return $this
     */
    public function setSupplierVATRegistrationNumber($supplierVATRegistrationNumber)
    {
        if (!is_null($supplierVATRegistrationNumber) && (mb_strlen($supplierVATRegistrationNumber) > 30)) {
            throw new \InvalidArgumentException('invalid length for $supplierVATRegistrationNumber when calling PurchaseCardsLevel2., must be smaller than or equal to 30.');
        }

        $this->container['supplierVATRegistrationNumber'] = $supplierVATRegistrationNumber;

        return $this;
    }

    /**
     * Gets totalDiscountAmountAndRate
     *
     * @return \FirstData\FirstApi\Client\Model\AdditionalAmountRate|null
     */
    public function getTotalDiscountAmountAndRate()
    {
        return $this->container['totalDiscountAmountAndRate'];
    }

    /**
     * Sets totalDiscountAmountAndRate
     *
     * @param \FirstData\FirstApi\Client\Model\AdditionalAmountRate|null $totalDiscountAmountAndRate totalDiscountAmountAndRate
     *
     * @return $this
     */
    public function setTotalDiscountAmountAndRate($totalDiscountAmountAndRate)
    {
        $this->container['totalDiscountAmountAndRate'] = $totalDiscountAmountAndRate;

        return $this;
    }

    /**
     * Gets vatShippingAmountAndRate
     *
     * @return \FirstData\FirstApi\Client\Model\AdditionalAmountRate|null
     */
    public function getVatShippingAmountAndRate()
    {
        return $this->container['vatShippingAmountAndRate'];
    }

    /**
     * Sets vatShippingAmountAndRate
     *
     * @param \FirstData\FirstApi\Client\Model\AdditionalAmountRate|null $vatShippingAmountAndRate vatShippingAmountAndRate
     *
     * @return $this
     */
    public function setVatShippingAmountAndRate($vatShippingAmountAndRate)
    {
        $this->container['vatShippingAmountAndRate'] = $vatShippingAmountAndRate;

        return $this;
    }

    /**
     * Gets dutyAmountAndRate
     *
     * @return \FirstData\FirstApi\Client\Model\AdditionalAmountRate|null
     */
    public function getDutyAmountAndRate()
    {
        return $this->container['dutyAmountAndRate'];
    }

    /**
     * Sets dutyAmountAndRate
     *
     * @param \FirstData\FirstApi\Client\Model\AdditionalAmountRate|null $dutyAmountAndRate dutyAmountAndRate
     *
     * @return $this
     */
    public function setDutyAmountAndRate($dutyAmountAndRate)
    {
        $this->container['dutyAmountAndRate'] = $dutyAmountAndRate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


