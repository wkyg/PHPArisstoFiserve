<?php
/**
 * Payment
 *
 * PHP version 5
 *
 * @category Class
 * @package  FirstData\FirstApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.4.0.20210824.002
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FirstData\FirstApi\Client\Model;

use \ArrayAccess;
use \FirstData\FirstApi\Client\ObjectSerializer;

/**
 * Payment Class Doc Comment
 *
 * @category Class
 * @description Payment information for the transaction.
 * @package  FirstData\FirstApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Payment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Payment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'paymentType' => 'string',
        'method' => '\FirstData\FirstApi\Client\Model\Method',
        'pinPresent' => 'bool',
        'entryMethod' => 'string',
        'issuerResponse' => '\FirstData\FirstApi\Client\Model\IssuerResponse',
        'issuerApprovedAmount' => 'string',
        'issuerCardBalance' => 'string',
        'verificationAvs' => '\FirstData\FirstApi\Client\Model\VerificationAvs',
        'verification3ds' => '\FirstData\FirstApi\Client\Model\Verification3ds',
        'verificationCvv' => '\FirstData\FirstApi\Client\Model\VerificationCvv',
        'userDefined' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'paymentType' => null,
        'method' => null,
        'pinPresent' => null,
        'entryMethod' => null,
        'issuerResponse' => null,
        'issuerApprovedAmount' => null,
        'issuerCardBalance' => null,
        'verificationAvs' => null,
        'verification3ds' => null,
        'verificationCvv' => null,
        'userDefined' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'paymentType' => 'paymentType',
        'method' => 'method',
        'pinPresent' => 'pinPresent',
        'entryMethod' => 'entryMethod',
        'issuerResponse' => 'issuerResponse',
        'issuerApprovedAmount' => 'issuerApprovedAmount',
        'issuerCardBalance' => 'issuerCardBalance',
        'verificationAvs' => 'verificationAvs',
        'verification3ds' => 'verification3ds',
        'verificationCvv' => 'verificationCvv',
        'userDefined' => 'userDefined'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'paymentType' => 'setPaymentType',
        'method' => 'setMethod',
        'pinPresent' => 'setPinPresent',
        'entryMethod' => 'setEntryMethod',
        'issuerResponse' => 'setIssuerResponse',
        'issuerApprovedAmount' => 'setIssuerApprovedAmount',
        'issuerCardBalance' => 'setIssuerCardBalance',
        'verificationAvs' => 'setVerificationAvs',
        'verification3ds' => 'setVerification3ds',
        'verificationCvv' => 'setVerificationCvv',
        'userDefined' => 'setUserDefined'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'paymentType' => 'getPaymentType',
        'method' => 'getMethod',
        'pinPresent' => 'getPinPresent',
        'entryMethod' => 'getEntryMethod',
        'issuerResponse' => 'getIssuerResponse',
        'issuerApprovedAmount' => 'getIssuerApprovedAmount',
        'issuerCardBalance' => 'getIssuerCardBalance',
        'verificationAvs' => 'getVerificationAvs',
        'verification3ds' => 'getVerification3ds',
        'verificationCvv' => 'getVerificationCvv',
        'userDefined' => 'getUserDefined'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PAYMENT_TYPE_CARD = 'payment/card';
    const PAYMENT_TYPE_WALLET = 'payment/wallet';
    const ENTRY_METHOD_MANUAL = 'manual';
    const ENTRY_METHOD_STRIPE = 'stripe';
    const ENTRY_METHOD_OCR = 'ocr';
    const ENTRY_METHOD_EMV = 'emv';
    const ENTRY_METHOD_NFC = 'nfc';
    const ENTRY_METHOD_REMOTE = 'remote';
    const ENTRY_METHOD_PIN_PRESENT = 'pin_present';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentTypeAllowableValues()
    {
        return [
            self::PAYMENT_TYPE_CARD,
            self::PAYMENT_TYPE_WALLET,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEntryMethodAllowableValues()
    {
        return [
            self::ENTRY_METHOD_MANUAL,
            self::ENTRY_METHOD_STRIPE,
            self::ENTRY_METHOD_OCR,
            self::ENTRY_METHOD_EMV,
            self::ENTRY_METHOD_NFC,
            self::ENTRY_METHOD_REMOTE,
            self::ENTRY_METHOD_PIN_PRESENT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['paymentType'] = isset($data['paymentType']) ? $data['paymentType'] : null;
        $this->container['method'] = isset($data['method']) ? $data['method'] : null;
        $this->container['pinPresent'] = isset($data['pinPresent']) ? $data['pinPresent'] : null;
        $this->container['entryMethod'] = isset($data['entryMethod']) ? $data['entryMethod'] : null;
        $this->container['issuerResponse'] = isset($data['issuerResponse']) ? $data['issuerResponse'] : null;
        $this->container['issuerApprovedAmount'] = isset($data['issuerApprovedAmount']) ? $data['issuerApprovedAmount'] : null;
        $this->container['issuerCardBalance'] = isset($data['issuerCardBalance']) ? $data['issuerCardBalance'] : null;
        $this->container['verificationAvs'] = isset($data['verificationAvs']) ? $data['verificationAvs'] : null;
        $this->container['verification3ds'] = isset($data['verification3ds']) ? $data['verification3ds'] : null;
        $this->container['verificationCvv'] = isset($data['verificationCvv']) ? $data['verificationCvv'] : null;
        $this->container['userDefined'] = isset($data['userDefined']) ? $data['userDefined'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['paymentType'] === null) {
            $invalidProperties[] = "'paymentType' can't be null";
        }
        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!is_null($this->container['paymentType']) && !in_array($this->container['paymentType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'paymentType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['method'] === null) {
            $invalidProperties[] = "'method' can't be null";
        }
        if ($this->container['pinPresent'] === null) {
            $invalidProperties[] = "'pinPresent' can't be null";
        }
        if ($this->container['entryMethod'] === null) {
            $invalidProperties[] = "'entryMethod' can't be null";
        }
        $allowedValues = $this->getEntryMethodAllowableValues();
        if (!is_null($this->container['entryMethod']) && !in_array($this->container['entryMethod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'entryMethod', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets paymentType
     *
     * @return string
     */
    public function getPaymentType()
    {
        return $this->container['paymentType'];
    }

    /**
     * Sets paymentType
     *
     * @param string $paymentType Defines the type of the payment.
     *
     * @return $this
     */
    public function setPaymentType($paymentType)
    {
        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!in_array($paymentType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'paymentType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['paymentType'] = $paymentType;

        return $this;
    }

    /**
     * Gets method
     *
     * @return \FirstData\FirstApi\Client\Model\Method
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param \FirstData\FirstApi\Client\Model\Method $method method
     *
     * @return $this
     */
    public function setMethod($method)
    {
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets pinPresent
     *
     * @return bool
     */
    public function getPinPresent()
    {
        return $this->container['pinPresent'];
    }

    /**
     * Sets pinPresent
     *
     * @param bool $pinPresent Indicates if the cards Personal Identification Number was supplied.
     *
     * @return $this
     */
    public function setPinPresent($pinPresent)
    {
        $this->container['pinPresent'] = $pinPresent;

        return $this;
    }

    /**
     * Gets entryMethod
     *
     * @return string
     */
    public function getEntryMethod()
    {
        return $this->container['entryMethod'];
    }

    /**
     * Sets entryMethod
     *
     * @param string $entryMethod The method in which the card information entered the system.
     *
     * @return $this
     */
    public function setEntryMethod($entryMethod)
    {
        $allowedValues = $this->getEntryMethodAllowableValues();
        if (!in_array($entryMethod, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'entryMethod', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['entryMethod'] = $entryMethod;

        return $this;
    }

    /**
     * Gets issuerResponse
     *
     * @return \FirstData\FirstApi\Client\Model\IssuerResponse|null
     */
    public function getIssuerResponse()
    {
        return $this->container['issuerResponse'];
    }

    /**
     * Sets issuerResponse
     *
     * @param \FirstData\FirstApi\Client\Model\IssuerResponse|null $issuerResponse issuerResponse
     *
     * @return $this
     */
    public function setIssuerResponse($issuerResponse)
    {
        $this->container['issuerResponse'] = $issuerResponse;

        return $this;
    }

    /**
     * Gets issuerApprovedAmount
     *
     * @return string|null
     */
    public function getIssuerApprovedAmount()
    {
        return $this->container['issuerApprovedAmount'];
    }

    /**
     * Sets issuerApprovedAmount
     *
     * @param string|null $issuerApprovedAmount The actual approved amount. This field should be filled in when the message has already passed through the issuer (e.g. post-authorization). For transaction/authorization this amount refers to the amount that was locked on the card-holders account.
     *
     * @return $this
     */
    public function setIssuerApprovedAmount($issuerApprovedAmount)
    {
        $this->container['issuerApprovedAmount'] = $issuerApprovedAmount;

        return $this;
    }

    /**
     * Gets issuerCardBalance
     *
     * @return string|null
     */
    public function getIssuerCardBalance()
    {
        return $this->container['issuerCardBalance'];
    }

    /**
     * Sets issuerCardBalance
     *
     * @param string|null $issuerCardBalance The payment methods account balance if available. This field should be filled in when the message has already passed through the issuer (e.g. post-authorization).
     *
     * @return $this
     */
    public function setIssuerCardBalance($issuerCardBalance)
    {
        $this->container['issuerCardBalance'] = $issuerCardBalance;

        return $this;
    }

    /**
     * Gets verificationAvs
     *
     * @return \FirstData\FirstApi\Client\Model\VerificationAvs|null
     */
    public function getVerificationAvs()
    {
        return $this->container['verificationAvs'];
    }

    /**
     * Sets verificationAvs
     *
     * @param \FirstData\FirstApi\Client\Model\VerificationAvs|null $verificationAvs verificationAvs
     *
     * @return $this
     */
    public function setVerificationAvs($verificationAvs)
    {
        $this->container['verificationAvs'] = $verificationAvs;

        return $this;
    }

    /**
     * Gets verification3ds
     *
     * @return \FirstData\FirstApi\Client\Model\Verification3ds|null
     */
    public function getVerification3ds()
    {
        return $this->container['verification3ds'];
    }

    /**
     * Sets verification3ds
     *
     * @param \FirstData\FirstApi\Client\Model\Verification3ds|null $verification3ds verification3ds
     *
     * @return $this
     */
    public function setVerification3ds($verification3ds)
    {
        $this->container['verification3ds'] = $verification3ds;

        return $this;
    }

    /**
     * Gets verificationCvv
     *
     * @return \FirstData\FirstApi\Client\Model\VerificationCvv|null
     */
    public function getVerificationCvv()
    {
        return $this->container['verificationCvv'];
    }

    /**
     * Sets verificationCvv
     *
     * @param \FirstData\FirstApi\Client\Model\VerificationCvv|null $verificationCvv verificationCvv
     *
     * @return $this
     */
    public function setVerificationCvv($verificationCvv)
    {
        $this->container['verificationCvv'] = $verificationCvv;

        return $this;
    }

    /**
     * Gets userDefined
     *
     * @return object|null
     */
    public function getUserDefined()
    {
        return $this->container['userDefined'];
    }

    /**
     * Sets userDefined
     *
     * @param object|null $userDefined A JSON object that carries any additional information that might be helpful for fraud detection.
     *
     * @return $this
     */
    public function setUserDefined($userDefined)
    {
        $this->container['userDefined'] = $userDefined;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


