<?php
/**
 * Secure3DAuthenticationRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  FirstData\FirstApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.4.0.20210824.002
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FirstData\FirstApi\Client\Model;
use \FirstData\FirstApi\Client\ObjectSerializer;

/**
 * Secure3DAuthenticationRequest Class Doc Comment
 *
 * @category Class
 * @description Request authentication of the payment card using the 3DS 2.x URL redirect scheme.
 * @package  FirstData\FirstApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Secure3DAuthenticationRequest extends AuthenticationRequest 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Secure3DAuthenticationRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'termURL' => 'string',
        'methodNotificationURL' => 'string',
        'challengeIndicator' => 'string',
        'messageCategory' => 'string',
        'challengeWindowSize' => 'string',
        'browserJavaScriptEnabled' => 'bool',
        'secure3DDeviceChannel' => 'string',
        'secure3DThreeRIIndicator' => 'string',
        'requestorAuthenticationIndicator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'termURL' => null,
        'methodNotificationURL' => null,
        'challengeIndicator' => null,
        'messageCategory' => null,
        'challengeWindowSize' => null,
        'browserJavaScriptEnabled' => null,
        'secure3DDeviceChannel' => null,
        'secure3DThreeRIIndicator' => null,
        'requestorAuthenticationIndicator' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes + parent::openAPITypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats + parent::openAPIFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'termURL' => 'termURL',
        'methodNotificationURL' => 'methodNotificationURL',
        'challengeIndicator' => 'challengeIndicator',
        'messageCategory' => 'messageCategory',
        'challengeWindowSize' => 'challengeWindowSize',
        'browserJavaScriptEnabled' => 'browserJavaScriptEnabled',
        'secure3DDeviceChannel' => 'secure3DDeviceChannel',
        'secure3DThreeRIIndicator' => 'secure3DThreeRIIndicator',
        'requestorAuthenticationIndicator' => 'requestorAuthenticationIndicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'termURL' => 'setTermURL',
        'methodNotificationURL' => 'setMethodNotificationURL',
        'challengeIndicator' => 'setChallengeIndicator',
        'messageCategory' => 'setMessageCategory',
        'challengeWindowSize' => 'setChallengeWindowSize',
        'browserJavaScriptEnabled' => 'setBrowserJavaScriptEnabled',
        'secure3DDeviceChannel' => 'setSecure3DDeviceChannel',
        'secure3DThreeRIIndicator' => 'setSecure3DThreeRIIndicator',
        'requestorAuthenticationIndicator' => 'setRequestorAuthenticationIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'termURL' => 'getTermURL',
        'methodNotificationURL' => 'getMethodNotificationURL',
        'challengeIndicator' => 'getChallengeIndicator',
        'messageCategory' => 'getMessageCategory',
        'challengeWindowSize' => 'getChallengeWindowSize',
        'browserJavaScriptEnabled' => 'getBrowserJavaScriptEnabled',
        'secure3DDeviceChannel' => 'getSecure3DDeviceChannel',
        'secure3DThreeRIIndicator' => 'getSecure3DThreeRIIndicator',
        'requestorAuthenticationIndicator' => 'getRequestorAuthenticationIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CHALLENGE_INDICATOR__01 = '01';
    const CHALLENGE_INDICATOR__02 = '02';
    const CHALLENGE_INDICATOR__03 = '03';
    const CHALLENGE_INDICATOR__04 = '04';
    const CHALLENGE_INDICATOR__05 = '05';
    const CHALLENGE_INDICATOR__06 = '06';
    const CHALLENGE_INDICATOR__07 = '07';
    const CHALLENGE_INDICATOR__08 = '08';
    const CHALLENGE_INDICATOR__09 = '09';
    const MESSAGE_CATEGORY__01 = '01';
    const MESSAGE_CATEGORY__02 = '02';
    const MESSAGE_CATEGORY__80 = '80';
    const CHALLENGE_WINDOW_SIZE__01 = '01';
    const CHALLENGE_WINDOW_SIZE__02 = '02';
    const CHALLENGE_WINDOW_SIZE__03 = '03';
    const CHALLENGE_WINDOW_SIZE__04 = '04';
    const CHALLENGE_WINDOW_SIZE__05 = '05';
    const SECURE3_D_DEVICE_CHANNEL__02 = '02';
    const SECURE3_D_DEVICE_CHANNEL__03 = '03';
    const SECURE3_D_THREE_RI_INDICATOR__01 = '01';
    const SECURE3_D_THREE_RI_INDICATOR__02 = '02';
    const SECURE3_D_THREE_RI_INDICATOR__03 = '03';
    const SECURE3_D_THREE_RI_INDICATOR__04 = '04';
    const SECURE3_D_THREE_RI_INDICATOR__05 = '05';
    const SECURE3_D_THREE_RI_INDICATOR__06 = '06';
    const SECURE3_D_THREE_RI_INDICATOR__07 = '07';
    const SECURE3_D_THREE_RI_INDICATOR__08 = '08';
    const SECURE3_D_THREE_RI_INDICATOR__09 = '09';
    const SECURE3_D_THREE_RI_INDICATOR__10 = '10';
    const SECURE3_D_THREE_RI_INDICATOR__11 = '11';
    const REQUESTOR_AUTHENTICATION_INDICATOR__01 = '01';
    const REQUESTOR_AUTHENTICATION_INDICATOR__02 = '02';
    const REQUESTOR_AUTHENTICATION_INDICATOR__03 = '03';
    const REQUESTOR_AUTHENTICATION_INDICATOR__04 = '04';
    const REQUESTOR_AUTHENTICATION_INDICATOR__05 = '05';
    const REQUESTOR_AUTHENTICATION_INDICATOR__06 = '06';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChallengeIndicatorAllowableValues()
    {
        return [
            self::CHALLENGE_INDICATOR__01,
            self::CHALLENGE_INDICATOR__02,
            self::CHALLENGE_INDICATOR__03,
            self::CHALLENGE_INDICATOR__04,
            self::CHALLENGE_INDICATOR__05,
            self::CHALLENGE_INDICATOR__06,
            self::CHALLENGE_INDICATOR__07,
            self::CHALLENGE_INDICATOR__08,
            self::CHALLENGE_INDICATOR__09,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMessageCategoryAllowableValues()
    {
        return [
            self::MESSAGE_CATEGORY__01,
            self::MESSAGE_CATEGORY__02,
            self::MESSAGE_CATEGORY__80,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChallengeWindowSizeAllowableValues()
    {
        return [
            self::CHALLENGE_WINDOW_SIZE__01,
            self::CHALLENGE_WINDOW_SIZE__02,
            self::CHALLENGE_WINDOW_SIZE__03,
            self::CHALLENGE_WINDOW_SIZE__04,
            self::CHALLENGE_WINDOW_SIZE__05,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecure3DDeviceChannelAllowableValues()
    {
        return [
            self::SECURE3_D_DEVICE_CHANNEL__02,
            self::SECURE3_D_DEVICE_CHANNEL__03,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecure3DThreeRIIndicatorAllowableValues()
    {
        return [
            self::SECURE3_D_THREE_RI_INDICATOR__01,
            self::SECURE3_D_THREE_RI_INDICATOR__02,
            self::SECURE3_D_THREE_RI_INDICATOR__03,
            self::SECURE3_D_THREE_RI_INDICATOR__04,
            self::SECURE3_D_THREE_RI_INDICATOR__05,
            self::SECURE3_D_THREE_RI_INDICATOR__06,
            self::SECURE3_D_THREE_RI_INDICATOR__07,
            self::SECURE3_D_THREE_RI_INDICATOR__08,
            self::SECURE3_D_THREE_RI_INDICATOR__09,
            self::SECURE3_D_THREE_RI_INDICATOR__10,
            self::SECURE3_D_THREE_RI_INDICATOR__11,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequestorAuthenticationIndicatorAllowableValues()
    {
        return [
            self::REQUESTOR_AUTHENTICATION_INDICATOR__01,
            self::REQUESTOR_AUTHENTICATION_INDICATOR__02,
            self::REQUESTOR_AUTHENTICATION_INDICATOR__03,
            self::REQUESTOR_AUTHENTICATION_INDICATOR__04,
            self::REQUESTOR_AUTHENTICATION_INDICATOR__05,
            self::REQUESTOR_AUTHENTICATION_INDICATOR__06,
        ];
    }
    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['termURL'] = isset($data['termURL']) ? $data['termURL'] : null;
        $this->container['methodNotificationURL'] = isset($data['methodNotificationURL']) ? $data['methodNotificationURL'] : null;
        $this->container['challengeIndicator'] = isset($data['challengeIndicator']) ? $data['challengeIndicator'] : '01';
        $this->container['messageCategory'] = isset($data['messageCategory']) ? $data['messageCategory'] : null;
        $this->container['challengeWindowSize'] = isset($data['challengeWindowSize']) ? $data['challengeWindowSize'] : null;
        $this->container['browserJavaScriptEnabled'] = isset($data['browserJavaScriptEnabled']) ? $data['browserJavaScriptEnabled'] : null;
        $this->container['secure3DDeviceChannel'] = isset($data['secure3DDeviceChannel']) ? $data['secure3DDeviceChannel'] : null;
        $this->container['secure3DThreeRIIndicator'] = isset($data['secure3DThreeRIIndicator']) ? $data['secure3DThreeRIIndicator'] : null;
        $this->container['requestorAuthenticationIndicator'] = isset($data['requestorAuthenticationIndicator']) ? $data['requestorAuthenticationIndicator'] : '01';
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['termURL'] === null) {
            $invalidProperties[] = "'termURL' can't be null";
        }
        if ($this->container['methodNotificationURL'] === null) {
            $invalidProperties[] = "'methodNotificationURL' can't be null";
        }
        $allowedValues = $this->getChallengeIndicatorAllowableValues();
        if (!is_null($this->container['challengeIndicator']) && !in_array($this->container['challengeIndicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'challengeIndicator', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMessageCategoryAllowableValues();
        if (!is_null($this->container['messageCategory']) && !in_array($this->container['messageCategory'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'messageCategory', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getChallengeWindowSizeAllowableValues();
        if (!is_null($this->container['challengeWindowSize']) && !in_array($this->container['challengeWindowSize'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'challengeWindowSize', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecure3DDeviceChannelAllowableValues();
        if (!is_null($this->container['secure3DDeviceChannel']) && !in_array($this->container['secure3DDeviceChannel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'secure3DDeviceChannel', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecure3DThreeRIIndicatorAllowableValues();
        if (!is_null($this->container['secure3DThreeRIIndicator']) && !in_array($this->container['secure3DThreeRIIndicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'secure3DThreeRIIndicator', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRequestorAuthenticationIndicatorAllowableValues();
        if (!is_null($this->container['requestorAuthenticationIndicator']) && !in_array($this->container['requestorAuthenticationIndicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'requestorAuthenticationIndicator', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets termURL
     *
     * @return string
     */
    public function getTermURL()
    {
        return $this->container['termURL'];
    }

    /**
     * Sets termURL
     *
     * @param string $termURL The result of the authentication will be sent to this URL. If not provided, a term URL will be dynamically generated. Note this must be a valid URL (special characters should be URL-encoded).
     *
     * @return $this
     */
    public function setTermURL($termURL)
    {
        $this->container['termURL'] = $termURL;

        return $this;
    }

    /**
     * Gets methodNotificationURL
     *
     * @return string
     */
    public function getMethodNotificationURL()
    {
        return $this->container['methodNotificationURL'];
    }

    /**
     * Sets methodNotificationURL
     *
     * @param string $methodNotificationURL The 3DS method iframe and transaction ID will be sent here. Note this must be a valid URL (special characters should be URL-encoded).
     *
     * @return $this
     */
    public function setMethodNotificationURL($methodNotificationURL)
    {
        $this->container['methodNotificationURL'] = $methodNotificationURL;

        return $this;
    }

    /**
     * Gets challengeIndicator
     *
     * @return string|null
     */
    public function getChallengeIndicator()
    {
        return $this->container['challengeIndicator'];
    }

    /**
     * Sets challengeIndicator
     *
     * @param string|null $challengeIndicator Indicates whether or not a challenge should be performed. 01 = No preference (You have no preference whether a challenge should be performed. This is the default value) 02 = No challenge requested (You prefer that no challenge should be performed) 03 = Challenge requested: 3DS Requestor Preference (You prefer that a challenge should be performed) 04 = Challenge requested: Mandate (There are local or regional mandates that mean that a challenge must be performed) The following are applicable only for 3DS 2.2 protocol. 05 = No challenge requested (transactional risk analysis is already performed) 06 = No challenge requested (Data share only) 07 = No challenge requested (strong consumer authentication is already performed) 08 = No challenge requested (utilise whitelist exemption if no challenge required) 09 = Challenge requested (whitelist prompt requested if challenge required)
     *
     * @return $this
     */
    public function setChallengeIndicator($challengeIndicator)
    {
        $allowedValues = $this->getChallengeIndicatorAllowableValues();
        if (!is_null($challengeIndicator) && !in_array($challengeIndicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'challengeIndicator', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['challengeIndicator'] = $challengeIndicator;

        return $this;
    }

    /**
     * Gets messageCategory
     *
     * @return string|null
     */
    public function getMessageCategory()
    {
        return $this->container['messageCategory'];
    }

    /**
     * Sets messageCategory
     *
     * @param string|null $messageCategory Indicates the message category of 3d secure authentication version 2.X. 01 = Payment Authentication 02 = Non-Payment Authentication 80 = Mastercard Data Only
     *
     * @return $this
     */
    public function setMessageCategory($messageCategory)
    {
        $allowedValues = $this->getMessageCategoryAllowableValues();
        if (!is_null($messageCategory) && !in_array($messageCategory, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'messageCategory', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['messageCategory'] = $messageCategory;

        return $this;
    }

    /**
     * Gets challengeWindowSize
     *
     * @return string|null
     */
    public function getChallengeWindowSize()
    {
        return $this->container['challengeWindowSize'];
    }

    /**
     * Sets challengeWindowSize
     *
     * @param string|null $challengeWindowSize Defines the size of the challenge window displayed to customers during authentication. 01 = 250 x 400 02 = 390 x 400 03 = 500 x 600 04 = 600 x 400 05 = Full screen
     *
     * @return $this
     */
    public function setChallengeWindowSize($challengeWindowSize)
    {
        $allowedValues = $this->getChallengeWindowSizeAllowableValues();
        if (!is_null($challengeWindowSize) && !in_array($challengeWindowSize, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'challengeWindowSize', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['challengeWindowSize'] = $challengeWindowSize;

        return $this;
    }

    /**
     * Gets browserJavaScriptEnabled
     *
     * @return bool|null
     */
    public function getBrowserJavaScriptEnabled()
    {
        return $this->container['browserJavaScriptEnabled'];
    }

    /**
     * Sets browserJavaScriptEnabled
     *
     * @param bool|null $browserJavaScriptEnabled Indicates if the browser issuing the request is capable of performing JavaScript.
     *
     * @return $this
     */
    public function setBrowserJavaScriptEnabled($browserJavaScriptEnabled)
    {
        $this->container['browserJavaScriptEnabled'] = $browserJavaScriptEnabled;

        return $this;
    }

    /**
     * Gets secure3DDeviceChannel
     *
     * @return string|null
     */
    public function getSecure3DDeviceChannel()
    {
        return $this->container['secure3DDeviceChannel'];
    }

    /**
     * Sets secure3DDeviceChannel
     *
     * @param string|null $secure3DDeviceChannel 02 = BRW 03 = 3RI
     *
     * @return $this
     */
    public function setSecure3DDeviceChannel($secure3DDeviceChannel)
    {
        $allowedValues = $this->getSecure3DDeviceChannelAllowableValues();
        if (!is_null($secure3DDeviceChannel) && !in_array($secure3DDeviceChannel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'secure3DDeviceChannel', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['secure3DDeviceChannel'] = $secure3DDeviceChannel;

        return $this;
    }

    /**
     * Gets secure3DThreeRIIndicator
     *
     * @return string|null
     */
    public function getSecure3DThreeRIIndicator()
    {
        return $this->container['secure3DThreeRIIndicator'];
    }

    /**
     * Sets secure3DThreeRIIndicator
     *
     * @param string|null $secure3DThreeRIIndicator 01 = Recurring transaction 02 = Instalment transaction 03 = Add card 04 = Maintain card information 05 = Account verification 06 = Split/delayed shipment 07 = Top-up 08 = Mail Order 09 = Telephone Order 10 = Whitelist status check 11 = Other payment
     *
     * @return $this
     */
    public function setSecure3DThreeRIIndicator($secure3DThreeRIIndicator)
    {
        $allowedValues = $this->getSecure3DThreeRIIndicatorAllowableValues();
        if (!is_null($secure3DThreeRIIndicator) && !in_array($secure3DThreeRIIndicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'secure3DThreeRIIndicator', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['secure3DThreeRIIndicator'] = $secure3DThreeRIIndicator;

        return $this;
    }

    /**
     * Gets requestorAuthenticationIndicator
     *
     * @return string|null
     */
    public function getRequestorAuthenticationIndicator()
    {
        return $this->container['requestorAuthenticationIndicator'];
    }

    /**
     * Sets requestorAuthenticationIndicator
     *
     * @param string|null $requestorAuthenticationIndicator Indicates whether or not a challenge should be performed. 01 = Payment transaction 02 = Recurring transaction 03 = Installment transaction 04 = Add card 05 = Maintain card 06 = Card holder verification as part of EMV token ID and Value
     *
     * @return $this
     */
    public function setRequestorAuthenticationIndicator($requestorAuthenticationIndicator)
    {
        $allowedValues = $this->getRequestorAuthenticationIndicatorAllowableValues();
        if (!is_null($requestorAuthenticationIndicator) && !in_array($requestorAuthenticationIndicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'requestorAuthenticationIndicator', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['requestorAuthenticationIndicator'] = $requestorAuthenticationIndicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


