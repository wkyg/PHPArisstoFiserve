<?php
/**
 * CarRental
 *
 * PHP version 5
 *
 * @category Class
 * @package  FirstData\FirstApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.4.0.20210824.002
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FirstData\FirstApi\Client\Model;

use \ArrayAccess;
use \FirstData\FirstApi\Client\ObjectSerializer;

/**
 * CarRental Class Doc Comment
 *
 * @category Class
 * @description Additional data specific to the car rental industry.
 * @package  FirstData\FirstApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CarRental implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CarRental';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'agreementNumber' => 'string',
        'renterName' => 'string',
        'returnCity' => 'string',
        'returnDate' => '\DateTime',
        'pickupDate' => '\DateTime',
        'rentalClassId' => 'string',
        'extraCharges' => '\FirstData\FirstApi\Client\Model\CarRentalExtraCharges[]',
        'noShowIndicator' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'agreementNumber' => null,
        'renterName' => null,
        'returnCity' => null,
        'returnDate' => 'date',
        'pickupDate' => 'date',
        'rentalClassId' => null,
        'extraCharges' => null,
        'noShowIndicator' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agreementNumber' => 'agreementNumber',
        'renterName' => 'renterName',
        'returnCity' => 'returnCity',
        'returnDate' => 'returnDate',
        'pickupDate' => 'pickupDate',
        'rentalClassId' => 'rentalClassId',
        'extraCharges' => 'extraCharges',
        'noShowIndicator' => 'noShowIndicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agreementNumber' => 'setAgreementNumber',
        'renterName' => 'setRenterName',
        'returnCity' => 'setReturnCity',
        'returnDate' => 'setReturnDate',
        'pickupDate' => 'setPickupDate',
        'rentalClassId' => 'setRentalClassId',
        'extraCharges' => 'setExtraCharges',
        'noShowIndicator' => 'setNoShowIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agreementNumber' => 'getAgreementNumber',
        'renterName' => 'getRenterName',
        'returnCity' => 'getReturnCity',
        'returnDate' => 'getReturnDate',
        'pickupDate' => 'getPickupDate',
        'rentalClassId' => 'getRentalClassId',
        'extraCharges' => 'getExtraCharges',
        'noShowIndicator' => 'getNoShowIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agreementNumber'] = isset($data['agreementNumber']) ? $data['agreementNumber'] : null;
        $this->container['renterName'] = isset($data['renterName']) ? $data['renterName'] : null;
        $this->container['returnCity'] = isset($data['returnCity']) ? $data['returnCity'] : null;
        $this->container['returnDate'] = isset($data['returnDate']) ? $data['returnDate'] : null;
        $this->container['pickupDate'] = isset($data['pickupDate']) ? $data['pickupDate'] : null;
        $this->container['rentalClassId'] = isset($data['rentalClassId']) ? $data['rentalClassId'] : null;
        $this->container['extraCharges'] = isset($data['extraCharges']) ? $data['extraCharges'] : null;
        $this->container['noShowIndicator'] = isset($data['noShowIndicator']) ? $data['noShowIndicator'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['agreementNumber']) && (mb_strlen($this->container['agreementNumber']) > 20)) {
            $invalidProperties[] = "invalid value for 'agreementNumber', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['renterName']) && (mb_strlen($this->container['renterName']) > 20)) {
            $invalidProperties[] = "invalid value for 'renterName', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['returnCity']) && (mb_strlen($this->container['returnCity']) > 20)) {
            $invalidProperties[] = "invalid value for 'returnCity', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['rentalClassId']) && (mb_strlen($this->container['rentalClassId']) > 6)) {
            $invalidProperties[] = "invalid value for 'rentalClassId', the character length must be smaller than or equal to 6.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agreementNumber
     *
     * @return string|null
     */
    public function getAgreementNumber()
    {
        return $this->container['agreementNumber'];
    }

    /**
     * Sets agreementNumber
     *
     * @param string|null $agreementNumber The car rental agreement number.
     *
     * @return $this
     */
    public function setAgreementNumber($agreementNumber)
    {
        if (!is_null($agreementNumber) && (mb_strlen($agreementNumber) > 20)) {
            throw new \InvalidArgumentException('invalid length for $agreementNumber when calling CarRental., must be smaller than or equal to 20.');
        }

        $this->container['agreementNumber'] = $agreementNumber;

        return $this;
    }

    /**
     * Gets renterName
     *
     * @return string|null
     */
    public function getRenterName()
    {
        return $this->container['renterName'];
    }

    /**
     * Sets renterName
     *
     * @param string|null $renterName The name of the person renting the car.
     *
     * @return $this
     */
    public function setRenterName($renterName)
    {
        if (!is_null($renterName) && (mb_strlen($renterName) > 20)) {
            throw new \InvalidArgumentException('invalid length for $renterName when calling CarRental., must be smaller than or equal to 20.');
        }

        $this->container['renterName'] = $renterName;

        return $this;
    }

    /**
     * Gets returnCity
     *
     * @return string|null
     */
    public function getReturnCity()
    {
        return $this->container['returnCity'];
    }

    /**
     * Sets returnCity
     *
     * @param string|null $returnCity The city where the rental ends and the car is returned.
     *
     * @return $this
     */
    public function setReturnCity($returnCity)
    {
        if (!is_null($returnCity) && (mb_strlen($returnCity) > 20)) {
            throw new \InvalidArgumentException('invalid length for $returnCity when calling CarRental., must be smaller than or equal to 20.');
        }

        $this->container['returnCity'] = $returnCity;

        return $this;
    }

    /**
     * Gets returnDate
     *
     * @return \DateTime|null
     */
    public function getReturnDate()
    {
        return $this->container['returnDate'];
    }

    /**
     * Sets returnDate
     *
     * @param \DateTime|null $returnDate The date the car rental ends and the car is returned.
     *
     * @return $this
     */
    public function setReturnDate($returnDate)
    {
        $this->container['returnDate'] = $returnDate;

        return $this;
    }

    /**
     * Gets pickupDate
     *
     * @return \DateTime|null
     */
    public function getPickupDate()
    {
        return $this->container['pickupDate'];
    }

    /**
     * Sets pickupDate
     *
     * @param \DateTime|null $pickupDate The date the car rental begins.
     *
     * @return $this
     */
    public function setPickupDate($pickupDate)
    {
        $this->container['pickupDate'] = $pickupDate;

        return $this;
    }

    /**
     * Gets rentalClassId
     *
     * @return string|null
     */
    public function getRentalClassId()
    {
        return $this->container['rentalClassId'];
    }

    /**
     * Sets rentalClassId
     *
     * @param string|null $rentalClassId The classification of the rental car.
     *
     * @return $this
     */
    public function setRentalClassId($rentalClassId)
    {
        if (!is_null($rentalClassId) && (mb_strlen($rentalClassId) > 6)) {
            throw new \InvalidArgumentException('invalid length for $rentalClassId when calling CarRental., must be smaller than or equal to 6.');
        }

        $this->container['rentalClassId'] = $rentalClassId;

        return $this;
    }

    /**
     * Gets extraCharges
     *
     * @return \FirstData\FirstApi\Client\Model\CarRentalExtraCharges[]|null
     */
    public function getExtraCharges()
    {
        return $this->container['extraCharges'];
    }

    /**
     * Sets extraCharges
     *
     * @param \FirstData\FirstApi\Client\Model\CarRentalExtraCharges[]|null $extraCharges Array containing information about charges other than the rental rate.
     *
     * @return $this
     */
    public function setExtraCharges($extraCharges)
    {
        $this->container['extraCharges'] = $extraCharges;

        return $this;
    }

    /**
     * Gets noShowIndicator
     *
     * @return bool|null
     */
    public function getNoShowIndicator()
    {
        return $this->container['noShowIndicator'];
    }

    /**
     * Sets noShowIndicator
     *
     * @param bool|null $noShowIndicator Indicates if the transaction is related to a no-show charge.
     *
     * @return $this
     */
    public function setNoShowIndicator($noShowIndicator)
    {
        $this->container['noShowIndicator'] = $noShowIndicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


