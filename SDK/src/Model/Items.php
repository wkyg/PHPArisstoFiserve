<?php
/**
 * Items
 *
 * PHP version 5
 *
 * @category Class
 * @package  FirstData\FirstApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.4.0.20210824.002
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FirstData\FirstApi\Client\Model;

use \ArrayAccess;
use \FirstData\FirstApi\Client\ObjectSerializer;

/**
 * Items Class Doc Comment
 *
 * @category Class
 * @description Network information.
 * @package  FirstData\FirstApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Items implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Items';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'networkType' => 'string',
        'ip' => 'string',
        'phoneNumber' => 'string',
        'carrierName' => 'string',
        'mobileCountryCode' => 'string',
        'mobileNetworkCode' => 'string',
        'subscriptionIdentificationNumber' => 'string',
        'locationAreaCode' => 'string',
        'cellId' => 'string',
        'standard' => 'string',
        'mac' => 'string',
        'ssid' => 'string',
        'bssid' => 'string',
        'userDefined' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'networkType' => null,
        'ip' => null,
        'phoneNumber' => null,
        'carrierName' => null,
        'mobileCountryCode' => null,
        'mobileNetworkCode' => null,
        'subscriptionIdentificationNumber' => null,
        'locationAreaCode' => null,
        'cellId' => null,
        'standard' => null,
        'mac' => null,
        'ssid' => null,
        'bssid' => null,
        'userDefined' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'networkType' => 'networkType',
        'ip' => 'ip',
        'phoneNumber' => 'phoneNumber',
        'carrierName' => 'carrierName',
        'mobileCountryCode' => 'mobileCountryCode',
        'mobileNetworkCode' => 'mobileNetworkCode',
        'subscriptionIdentificationNumber' => 'subscriptionIdentificationNumber',
        'locationAreaCode' => 'locationAreaCode',
        'cellId' => 'cellId',
        'standard' => 'standard',
        'mac' => 'mac',
        'ssid' => 'ssid',
        'bssid' => 'bssid',
        'userDefined' => 'userDefined'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'networkType' => 'setNetworkType',
        'ip' => 'setIp',
        'phoneNumber' => 'setPhoneNumber',
        'carrierName' => 'setCarrierName',
        'mobileCountryCode' => 'setMobileCountryCode',
        'mobileNetworkCode' => 'setMobileNetworkCode',
        'subscriptionIdentificationNumber' => 'setSubscriptionIdentificationNumber',
        'locationAreaCode' => 'setLocationAreaCode',
        'cellId' => 'setCellId',
        'standard' => 'setStandard',
        'mac' => 'setMac',
        'ssid' => 'setSsid',
        'bssid' => 'setBssid',
        'userDefined' => 'setUserDefined'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'networkType' => 'getNetworkType',
        'ip' => 'getIp',
        'phoneNumber' => 'getPhoneNumber',
        'carrierName' => 'getCarrierName',
        'mobileCountryCode' => 'getMobileCountryCode',
        'mobileNetworkCode' => 'getMobileNetworkCode',
        'subscriptionIdentificationNumber' => 'getSubscriptionIdentificationNumber',
        'locationAreaCode' => 'getLocationAreaCode',
        'cellId' => 'getCellId',
        'standard' => 'getStandard',
        'mac' => 'getMac',
        'ssid' => 'getSsid',
        'bssid' => 'getBssid',
        'userDefined' => 'getUserDefined'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const NETWORK_TYPE_MOBILE = 'network/mobile';
    const NETWORK_TYPE_WIFI = 'network/wifi';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNetworkTypeAllowableValues()
    {
        return [
            self::NETWORK_TYPE_MOBILE,
            self::NETWORK_TYPE_WIFI,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['networkType'] = isset($data['networkType']) ? $data['networkType'] : null;
        $this->container['ip'] = isset($data['ip']) ? $data['ip'] : null;
        $this->container['phoneNumber'] = isset($data['phoneNumber']) ? $data['phoneNumber'] : null;
        $this->container['carrierName'] = isset($data['carrierName']) ? $data['carrierName'] : null;
        $this->container['mobileCountryCode'] = isset($data['mobileCountryCode']) ? $data['mobileCountryCode'] : null;
        $this->container['mobileNetworkCode'] = isset($data['mobileNetworkCode']) ? $data['mobileNetworkCode'] : null;
        $this->container['subscriptionIdentificationNumber'] = isset($data['subscriptionIdentificationNumber']) ? $data['subscriptionIdentificationNumber'] : null;
        $this->container['locationAreaCode'] = isset($data['locationAreaCode']) ? $data['locationAreaCode'] : null;
        $this->container['cellId'] = isset($data['cellId']) ? $data['cellId'] : null;
        $this->container['standard'] = isset($data['standard']) ? $data['standard'] : null;
        $this->container['mac'] = isset($data['mac']) ? $data['mac'] : null;
        $this->container['ssid'] = isset($data['ssid']) ? $data['ssid'] : null;
        $this->container['bssid'] = isset($data['bssid']) ? $data['bssid'] : null;
        $this->container['userDefined'] = isset($data['userDefined']) ? $data['userDefined'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['networkType'] === null) {
            $invalidProperties[] = "'networkType' can't be null";
        }
        $allowedValues = $this->getNetworkTypeAllowableValues();
        if (!is_null($this->container['networkType']) && !in_array($this->container['networkType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'networkType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets networkType
     *
     * @return string
     */
    public function getNetworkType()
    {
        return $this->container['networkType'];
    }

    /**
     * Sets networkType
     *
     * @param string $networkType Defines the type of network associated with the device.
     *
     * @return $this
     */
    public function setNetworkType($networkType)
    {
        $allowedValues = $this->getNetworkTypeAllowableValues();
        if (!in_array($networkType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'networkType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['networkType'] = $networkType;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip The IPv4 or IPv6 address of the device if the network assigned one.
     *
     * @return $this
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets phoneNumber
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phoneNumber'];
    }

    /**
     * Sets phoneNumber
     *
     * @param string|null $phoneNumber The devices primary phone number. This value should be supplied directly without any transformation (e.g. removal of spaces, hyphens or parentheses). If this data is available in segregated fields, it should be concatenated using a blank space (\" \") as a separator.
     *
     * @return $this
     */
    public function setPhoneNumber($phoneNumber)
    {
        $this->container['phoneNumber'] = $phoneNumber;

        return $this;
    }

    /**
     * Gets carrierName
     *
     * @return string|null
     */
    public function getCarrierName()
    {
        return $this->container['carrierName'];
    }

    /**
     * Sets carrierName
     *
     * @param string|null $carrierName The network carrier name.
     *
     * @return $this
     */
    public function setCarrierName($carrierName)
    {
        $this->container['carrierName'] = $carrierName;

        return $this;
    }

    /**
     * Gets mobileCountryCode
     *
     * @return string|null
     */
    public function getMobileCountryCode()
    {
        return $this->container['mobileCountryCode'];
    }

    /**
     * Sets mobileCountryCode
     *
     * @param string|null $mobileCountryCode The Mobile Country Code (MCC) as described in the ITUs E.212 specification.
     *
     * @return $this
     */
    public function setMobileCountryCode($mobileCountryCode)
    {
        $this->container['mobileCountryCode'] = $mobileCountryCode;

        return $this;
    }

    /**
     * Gets mobileNetworkCode
     *
     * @return string|null
     */
    public function getMobileNetworkCode()
    {
        return $this->container['mobileNetworkCode'];
    }

    /**
     * Sets mobileNetworkCode
     *
     * @param string|null $mobileNetworkCode The Mobile Network Code (MNC) as described in the ITUs E.212 specification.
     *
     * @return $this
     */
    public function setMobileNetworkCode($mobileNetworkCode)
    {
        $this->container['mobileNetworkCode'] = $mobileNetworkCode;

        return $this;
    }

    /**
     * Gets subscriptionIdentificationNumber
     *
     * @return string|null
     */
    public function getSubscriptionIdentificationNumber()
    {
        return $this->container['subscriptionIdentificationNumber'];
    }

    /**
     * Sets subscriptionIdentificationNumber
     *
     * @param string|null $subscriptionIdentificationNumber The Mobile Subscription Identification Number code (MSIN) as described in the ITUs E.212 specification.
     *
     * @return $this
     */
    public function setSubscriptionIdentificationNumber($subscriptionIdentificationNumber)
    {
        $this->container['subscriptionIdentificationNumber'] = $subscriptionIdentificationNumber;

        return $this;
    }

    /**
     * Gets locationAreaCode
     *
     * @return string|null
     */
    public function getLocationAreaCode()
    {
        return $this->container['locationAreaCode'];
    }

    /**
     * Sets locationAreaCode
     *
     * @param string|null $locationAreaCode The Location Area Code (LAC) is a 16-bit identifier for a region that is covered by a set of network antennas.
     *
     * @return $this
     */
    public function setLocationAreaCode($locationAreaCode)
    {
        $this->container['locationAreaCode'] = $locationAreaCode;

        return $this;
    }

    /**
     * Gets cellId
     *
     * @return string|null
     */
    public function getCellId()
    {
        return $this->container['cellId'];
    }

    /**
     * Sets cellId
     *
     * @param string|null $cellId The Cell ID (CID) is identifier for a specific Base Transceiver Station (BTS) within a specific Location Area Code (LAC).
     *
     * @return $this
     */
    public function setCellId($cellId)
    {
        $this->container['cellId'] = $cellId;

        return $this;
    }

    /**
     * Gets standard
     *
     * @return string|null
     */
    public function getStandard()
    {
        return $this->container['standard'];
    }

    /**
     * Sets standard
     *
     * @param string|null $standard An identifier of the network standard used.
     *
     * @return $this
     */
    public function setStandard($standard)
    {
        $this->container['standard'] = $standard;

        return $this;
    }

    /**
     * Gets mac
     *
     * @return string|null
     */
    public function getMac()
    {
        return $this->container['mac'];
    }

    /**
     * Sets mac
     *
     * @param string|null $mac The MAC address of the device that is connected to the Wi-Fi network.
     *
     * @return $this
     */
    public function setMac($mac)
    {
        $this->container['mac'] = $mac;

        return $this;
    }

    /**
     * Gets ssid
     *
     * @return string|null
     */
    public function getSsid()
    {
        return $this->container['ssid'];
    }

    /**
     * Sets ssid
     *
     * @param string|null $ssid The Wi-Fi networks Service Set Identifier (SSID).
     *
     * @return $this
     */
    public function setSsid($ssid)
    {
        $this->container['ssid'] = $ssid;

        return $this;
    }

    /**
     * Gets bssid
     *
     * @return string|null
     */
    public function getBssid()
    {
        return $this->container['bssid'];
    }

    /**
     * Sets bssid
     *
     * @param string|null $bssid The Wi-Fi networks Basic Service Set Identifier (BSSID).
     *
     * @return $this
     */
    public function setBssid($bssid)
    {
        $this->container['bssid'] = $bssid;

        return $this;
    }

    /**
     * Gets userDefined
     *
     * @return object|null
     */
    public function getUserDefined()
    {
        return $this->container['userDefined'];
    }

    /**
     * Sets userDefined
     *
     * @param object|null $userDefined A JSON object that can carry any additional information about the network that might be helpful for fraud detection.
     *
     * @return $this
     */
    public function setUserDefined($userDefined)
    {
        $this->container['userDefined'] = $userDefined;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


