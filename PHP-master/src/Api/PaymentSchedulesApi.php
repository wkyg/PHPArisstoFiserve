<?php
/**
 * PaymentSchedulesApi
 * PHP version 5
 *
 * @category Class
 * @package  FirstData\FirstApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.3.0.20210608.001
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FirstData\FirstApi\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use FirstData\FirstApi\Client\ApiException;
use FirstData\FirstApi\Client\Configuration;
use FirstData\FirstApi\Client\HeaderSelector;
use FirstData\FirstApi\Client\ObjectSerializer;

/**
 * PaymentSchedulesApi Class Doc Comment
 *
 * @category Class
 * @package  FirstData\FirstApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentSchedulesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelPaymentSchedule
     *
     * Cancel a gateway payment schedule.
     *
     * @param  string $contentType Content type. (required)
     * @param  string $clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param  string $apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param  int $timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param  string $orderId Gateway order identifier as returned in the parameter orderId. (required)
     * @param  string $messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param  string $region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     * @param  string $storeId An optional outlet ID for clients that support multiple stores in the same developer app. (optional)
     *
     * @throws \FirstData\FirstApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FirstData\FirstApi\Client\Model\PaymentSchedulesResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse
     */
    public function cancelPaymentSchedule($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $messageSignature = null, $region = null, $storeId = null)
    {
        list($response) = $this->cancelPaymentScheduleWithHttpInfo($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $messageSignature, $region, $storeId);
        return $response;
    }

    /**
     * Operation cancelPaymentScheduleWithHttpInfo
     *
     * Cancel a gateway payment schedule.
     *
     * @param  string $contentType Content type. (required)
     * @param  string $clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param  string $apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param  int $timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param  string $orderId Gateway order identifier as returned in the parameter orderId. (required)
     * @param  string $messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param  string $region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     * @param  string $storeId An optional outlet ID for clients that support multiple stores in the same developer app. (optional)
     *
     * @throws \FirstData\FirstApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FirstData\FirstApi\Client\Model\PaymentSchedulesResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelPaymentScheduleWithHttpInfo($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $messageSignature = null, $region = null, $storeId = null)
    {
        $request = $this->cancelPaymentScheduleRequest($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $messageSignature, $region, $storeId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\FirstData\FirstApi\Client\Model\PaymentSchedulesResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\PaymentSchedulesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\FirstData\FirstApi\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\FirstData\FirstApi\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\FirstData\FirstApi\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\FirstData\FirstApi\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\FirstData\FirstApi\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\FirstData\FirstApi\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\FirstData\FirstApi\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FirstData\FirstApi\Client\Model\PaymentSchedulesResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\PaymentSchedulesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelPaymentScheduleAsync
     *
     * Cancel a gateway payment schedule.
     *
     * @param  string $contentType Content type. (required)
     * @param  string $clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param  string $apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param  int $timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param  string $orderId Gateway order identifier as returned in the parameter orderId. (required)
     * @param  string $messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param  string $region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     * @param  string $storeId An optional outlet ID for clients that support multiple stores in the same developer app. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPaymentScheduleAsync($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $messageSignature = null, $region = null, $storeId = null)
    {
        return $this->cancelPaymentScheduleAsyncWithHttpInfo($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $messageSignature, $region, $storeId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelPaymentScheduleAsyncWithHttpInfo
     *
     * Cancel a gateway payment schedule.
     *
     * @param  string $contentType Content type. (required)
     * @param  string $clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param  string $apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param  int $timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param  string $orderId Gateway order identifier as returned in the parameter orderId. (required)
     * @param  string $messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param  string $region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     * @param  string $storeId An optional outlet ID for clients that support multiple stores in the same developer app. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPaymentScheduleAsyncWithHttpInfo($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $messageSignature = null, $region = null, $storeId = null)
    {
        $returnType = '\FirstData\FirstApi\Client\Model\PaymentSchedulesResponse';
        $request = $this->cancelPaymentScheduleRequest($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $messageSignature, $region, $storeId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelPaymentSchedule'
     *
     * @param  string $contentType Content type. (required)
     * @param  string $clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param  string $apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param  int $timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param  string $orderId Gateway order identifier as returned in the parameter orderId. (required)
     * @param  string $messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param  string $region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     * @param  string $storeId An optional outlet ID for clients that support multiple stores in the same developer app. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelPaymentScheduleRequest($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $messageSignature = null, $region = null, $storeId = null)
    {
        // verify the required parameter 'contentType' is set
        if ($contentType === null || (is_array($contentType) && count($contentType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contentType when calling cancelPaymentSchedule'
            );
        }
        // verify the required parameter 'clientRequestId' is set
        if ($clientRequestId === null || (is_array($clientRequestId) && count($clientRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clientRequestId when calling cancelPaymentSchedule'
            );
        }
        // verify the required parameter 'apiKey' is set
        if ($apiKey === null || (is_array($apiKey) && count($apiKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiKey when calling cancelPaymentSchedule'
            );
        }
        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling cancelPaymentSchedule'
            );
        }
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling cancelPaymentSchedule'
            );
        }

        $resourcePath = '/payment-schedules/{order-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storeId !== null) {
            $queryParams['storeId'] = ObjectSerializer::toQueryValue($storeId);
        }
        // header params
        if ($contentType !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($contentType);
        }
        // header params
        if ($clientRequestId !== null) {
            $headerParams['Client-Request-Id'] = ObjectSerializer::toHeaderValue($clientRequestId);
        }
        // header params
        if ($apiKey !== null) {
            $headerParams['Api-Key'] = ObjectSerializer::toHeaderValue($apiKey);
        }
        // header params
        if ($timestamp !== null) {
            $headerParams['Timestamp'] = ObjectSerializer::toHeaderValue($timestamp);
        }
        // header params
        if ($messageSignature !== null) {
            $headerParams['Message-Signature'] = ObjectSerializer::toHeaderValue($messageSignature);
        }
        // header params
        if ($region !== null) {
            $headerParams['Region'] = ObjectSerializer::toHeaderValue($region);
        }

        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'order-id' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPaymentSchedule
     *
     * Create gateway payment schedule.
     *
     * @param  string $contentType Content type. (required)
     * @param  string $clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param  string $apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param  int $timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param  \FirstData\FirstApi\Client\Model\PaymentSchedulesRequest $paymentSchedulesRequest Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest. (required)
     * @param  string $messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param  string $region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     *
     * @throws \FirstData\FirstApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FirstData\FirstApi\Client\Model\PaymentSchedulesResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\PaymentSchedulesErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\PaymentSchedulesErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse
     */
    public function createPaymentSchedule($contentType, $clientRequestId, $apiKey, $timestamp, $paymentSchedulesRequest, $messageSignature = null, $region = null)
    {
        list($response) = $this->createPaymentScheduleWithHttpInfo($contentType, $clientRequestId, $apiKey, $timestamp, $paymentSchedulesRequest, $messageSignature, $region);
        return $response;
    }

    /**
     * Operation createPaymentScheduleWithHttpInfo
     *
     * Create gateway payment schedule.
     *
     * @param  string $contentType Content type. (required)
     * @param  string $clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param  string $apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param  int $timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param  \FirstData\FirstApi\Client\Model\PaymentSchedulesRequest $paymentSchedulesRequest Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest. (required)
     * @param  string $messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param  string $region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     *
     * @throws \FirstData\FirstApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FirstData\FirstApi\Client\Model\PaymentSchedulesResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\PaymentSchedulesErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\PaymentSchedulesErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPaymentScheduleWithHttpInfo($contentType, $clientRequestId, $apiKey, $timestamp, $paymentSchedulesRequest, $messageSignature = null, $region = null)
    {
        $request = $this->createPaymentScheduleRequest($contentType, $clientRequestId, $apiKey, $timestamp, $paymentSchedulesRequest, $messageSignature, $region);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\FirstData\FirstApi\Client\Model\PaymentSchedulesResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\PaymentSchedulesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\FirstData\FirstApi\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\FirstData\FirstApi\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\FirstData\FirstApi\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\FirstData\FirstApi\Client\Model\PaymentSchedulesErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\PaymentSchedulesErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\FirstData\FirstApi\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\FirstData\FirstApi\Client\Model\PaymentSchedulesErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\PaymentSchedulesErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\FirstData\FirstApi\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FirstData\FirstApi\Client\Model\PaymentSchedulesResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\PaymentSchedulesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\PaymentSchedulesErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\PaymentSchedulesErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPaymentScheduleAsync
     *
     * Create gateway payment schedule.
     *
     * @param  string $contentType Content type. (required)
     * @param  string $clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param  string $apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param  int $timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param  \FirstData\FirstApi\Client\Model\PaymentSchedulesRequest $paymentSchedulesRequest Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest. (required)
     * @param  string $messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param  string $region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentScheduleAsync($contentType, $clientRequestId, $apiKey, $timestamp, $paymentSchedulesRequest, $messageSignature = null, $region = null)
    {
        return $this->createPaymentScheduleAsyncWithHttpInfo($contentType, $clientRequestId, $apiKey, $timestamp, $paymentSchedulesRequest, $messageSignature, $region)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPaymentScheduleAsyncWithHttpInfo
     *
     * Create gateway payment schedule.
     *
     * @param  string $contentType Content type. (required)
     * @param  string $clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param  string $apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param  int $timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param  \FirstData\FirstApi\Client\Model\PaymentSchedulesRequest $paymentSchedulesRequest Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest. (required)
     * @param  string $messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param  string $region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentScheduleAsyncWithHttpInfo($contentType, $clientRequestId, $apiKey, $timestamp, $paymentSchedulesRequest, $messageSignature = null, $region = null)
    {
        $returnType = '\FirstData\FirstApi\Client\Model\PaymentSchedulesResponse';
        $request = $this->createPaymentScheduleRequest($contentType, $clientRequestId, $apiKey, $timestamp, $paymentSchedulesRequest, $messageSignature, $region);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPaymentSchedule'
     *
     * @param  string $contentType Content type. (required)
     * @param  string $clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param  string $apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param  int $timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param  \FirstData\FirstApi\Client\Model\PaymentSchedulesRequest $paymentSchedulesRequest Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest. (required)
     * @param  string $messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param  string $region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPaymentScheduleRequest($contentType, $clientRequestId, $apiKey, $timestamp, $paymentSchedulesRequest, $messageSignature = null, $region = null)
    {
        // verify the required parameter 'contentType' is set
        if ($contentType === null || (is_array($contentType) && count($contentType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contentType when calling createPaymentSchedule'
            );
        }
        // verify the required parameter 'clientRequestId' is set
        if ($clientRequestId === null || (is_array($clientRequestId) && count($clientRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clientRequestId when calling createPaymentSchedule'
            );
        }
        // verify the required parameter 'apiKey' is set
        if ($apiKey === null || (is_array($apiKey) && count($apiKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiKey when calling createPaymentSchedule'
            );
        }
        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling createPaymentSchedule'
            );
        }
        // verify the required parameter 'paymentSchedulesRequest' is set
        if ($paymentSchedulesRequest === null || (is_array($paymentSchedulesRequest) && count($paymentSchedulesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentSchedulesRequest when calling createPaymentSchedule'
            );
        }

        $resourcePath = '/payment-schedules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($contentType !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($contentType);
        }
        // header params
        if ($clientRequestId !== null) {
            $headerParams['Client-Request-Id'] = ObjectSerializer::toHeaderValue($clientRequestId);
        }
        // header params
        if ($apiKey !== null) {
            $headerParams['Api-Key'] = ObjectSerializer::toHeaderValue($apiKey);
        }
        // header params
        if ($timestamp !== null) {
            $headerParams['Timestamp'] = ObjectSerializer::toHeaderValue($timestamp);
        }
        // header params
        if ($messageSignature !== null) {
            $headerParams['Message-Signature'] = ObjectSerializer::toHeaderValue($messageSignature);
        }
        // header params
        if ($region !== null) {
            $headerParams['Region'] = ObjectSerializer::toHeaderValue($region);
        }


        // body params
        $_tempBody = null;
        if (isset($paymentSchedulesRequest)) {
            $_tempBody = $paymentSchedulesRequest;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inquiryPaymentSchedule
     *
     * View a gateway payment schedule.
     *
     * @param  string $contentType Content type. (required)
     * @param  string $clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param  string $apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param  int $timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param  string $orderId Gateway order identifier as returned in the parameter orderId. (required)
     * @param  string $messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param  string $region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     * @param  string $storeId An optional outlet ID for clients that support multiple stores in the same developer app. (optional)
     *
     * @throws \FirstData\FirstApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FirstData\FirstApi\Client\Model\RecurringPaymentDetailsResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse
     */
    public function inquiryPaymentSchedule($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $messageSignature = null, $region = null, $storeId = null)
    {
        list($response) = $this->inquiryPaymentScheduleWithHttpInfo($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $messageSignature, $region, $storeId);
        return $response;
    }

    /**
     * Operation inquiryPaymentScheduleWithHttpInfo
     *
     * View a gateway payment schedule.
     *
     * @param  string $contentType Content type. (required)
     * @param  string $clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param  string $apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param  int $timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param  string $orderId Gateway order identifier as returned in the parameter orderId. (required)
     * @param  string $messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param  string $region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     * @param  string $storeId An optional outlet ID for clients that support multiple stores in the same developer app. (optional)
     *
     * @throws \FirstData\FirstApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FirstData\FirstApi\Client\Model\RecurringPaymentDetailsResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function inquiryPaymentScheduleWithHttpInfo($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $messageSignature = null, $region = null, $storeId = null)
    {
        $request = $this->inquiryPaymentScheduleRequest($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $messageSignature, $region, $storeId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\FirstData\FirstApi\Client\Model\RecurringPaymentDetailsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\RecurringPaymentDetailsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\FirstData\FirstApi\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\FirstData\FirstApi\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\FirstData\FirstApi\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\FirstData\FirstApi\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\FirstData\FirstApi\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FirstData\FirstApi\Client\Model\RecurringPaymentDetailsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\RecurringPaymentDetailsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inquiryPaymentScheduleAsync
     *
     * View a gateway payment schedule.
     *
     * @param  string $contentType Content type. (required)
     * @param  string $clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param  string $apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param  int $timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param  string $orderId Gateway order identifier as returned in the parameter orderId. (required)
     * @param  string $messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param  string $region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     * @param  string $storeId An optional outlet ID for clients that support multiple stores in the same developer app. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inquiryPaymentScheduleAsync($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $messageSignature = null, $region = null, $storeId = null)
    {
        return $this->inquiryPaymentScheduleAsyncWithHttpInfo($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $messageSignature, $region, $storeId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inquiryPaymentScheduleAsyncWithHttpInfo
     *
     * View a gateway payment schedule.
     *
     * @param  string $contentType Content type. (required)
     * @param  string $clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param  string $apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param  int $timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param  string $orderId Gateway order identifier as returned in the parameter orderId. (required)
     * @param  string $messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param  string $region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     * @param  string $storeId An optional outlet ID for clients that support multiple stores in the same developer app. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inquiryPaymentScheduleAsyncWithHttpInfo($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $messageSignature = null, $region = null, $storeId = null)
    {
        $returnType = '\FirstData\FirstApi\Client\Model\RecurringPaymentDetailsResponse';
        $request = $this->inquiryPaymentScheduleRequest($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $messageSignature, $region, $storeId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inquiryPaymentSchedule'
     *
     * @param  string $contentType Content type. (required)
     * @param  string $clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param  string $apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param  int $timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param  string $orderId Gateway order identifier as returned in the parameter orderId. (required)
     * @param  string $messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param  string $region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     * @param  string $storeId An optional outlet ID for clients that support multiple stores in the same developer app. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inquiryPaymentScheduleRequest($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $messageSignature = null, $region = null, $storeId = null)
    {
        // verify the required parameter 'contentType' is set
        if ($contentType === null || (is_array($contentType) && count($contentType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contentType when calling inquiryPaymentSchedule'
            );
        }
        // verify the required parameter 'clientRequestId' is set
        if ($clientRequestId === null || (is_array($clientRequestId) && count($clientRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clientRequestId when calling inquiryPaymentSchedule'
            );
        }
        // verify the required parameter 'apiKey' is set
        if ($apiKey === null || (is_array($apiKey) && count($apiKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiKey when calling inquiryPaymentSchedule'
            );
        }
        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling inquiryPaymentSchedule'
            );
        }
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling inquiryPaymentSchedule'
            );
        }

        $resourcePath = '/payment-schedules/{order-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storeId !== null) {
            $queryParams['storeId'] = ObjectSerializer::toQueryValue($storeId);
        }
        // header params
        if ($contentType !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($contentType);
        }
        // header params
        if ($clientRequestId !== null) {
            $headerParams['Client-Request-Id'] = ObjectSerializer::toHeaderValue($clientRequestId);
        }
        // header params
        if ($apiKey !== null) {
            $headerParams['Api-Key'] = ObjectSerializer::toHeaderValue($apiKey);
        }
        // header params
        if ($timestamp !== null) {
            $headerParams['Timestamp'] = ObjectSerializer::toHeaderValue($timestamp);
        }
        // header params
        if ($messageSignature !== null) {
            $headerParams['Message-Signature'] = ObjectSerializer::toHeaderValue($messageSignature);
        }
        // header params
        if ($region !== null) {
            $headerParams['Region'] = ObjectSerializer::toHeaderValue($region);
        }

        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'order-id' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePaymentSchedule
     *
     * Update a gateway payment schedule.
     *
     * @param  string $contentType Content type. (required)
     * @param  string $clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param  string $apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param  int $timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param  string $orderId Gateway order identifier as returned in the parameter orderId. (required)
     * @param  \FirstData\FirstApi\Client\Model\PaymentSchedulesRequest $paymentSchedulesRequest Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest. (required)
     * @param  string $messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param  string $region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     *
     * @throws \FirstData\FirstApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FirstData\FirstApi\Client\Model\PaymentSchedulesResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse
     */
    public function updatePaymentSchedule($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $paymentSchedulesRequest, $messageSignature = null, $region = null)
    {
        list($response) = $this->updatePaymentScheduleWithHttpInfo($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $paymentSchedulesRequest, $messageSignature, $region);
        return $response;
    }

    /**
     * Operation updatePaymentScheduleWithHttpInfo
     *
     * Update a gateway payment schedule.
     *
     * @param  string $contentType Content type. (required)
     * @param  string $clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param  string $apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param  int $timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param  string $orderId Gateway order identifier as returned in the parameter orderId. (required)
     * @param  \FirstData\FirstApi\Client\Model\PaymentSchedulesRequest $paymentSchedulesRequest Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest. (required)
     * @param  string $messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param  string $region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     *
     * @throws \FirstData\FirstApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FirstData\FirstApi\Client\Model\PaymentSchedulesResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse|\FirstData\FirstApi\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePaymentScheduleWithHttpInfo($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $paymentSchedulesRequest, $messageSignature = null, $region = null)
    {
        $request = $this->updatePaymentScheduleRequest($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $paymentSchedulesRequest, $messageSignature, $region);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\FirstData\FirstApi\Client\Model\PaymentSchedulesResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\PaymentSchedulesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\FirstData\FirstApi\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\FirstData\FirstApi\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\FirstData\FirstApi\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\FirstData\FirstApi\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\FirstData\FirstApi\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\FirstData\FirstApi\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FirstData\FirstApi\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FirstData\FirstApi\Client\Model\PaymentSchedulesResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\PaymentSchedulesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FirstData\FirstApi\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePaymentScheduleAsync
     *
     * Update a gateway payment schedule.
     *
     * @param  string $contentType Content type. (required)
     * @param  string $clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param  string $apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param  int $timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param  string $orderId Gateway order identifier as returned in the parameter orderId. (required)
     * @param  \FirstData\FirstApi\Client\Model\PaymentSchedulesRequest $paymentSchedulesRequest Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest. (required)
     * @param  string $messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param  string $region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePaymentScheduleAsync($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $paymentSchedulesRequest, $messageSignature = null, $region = null)
    {
        return $this->updatePaymentScheduleAsyncWithHttpInfo($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $paymentSchedulesRequest, $messageSignature, $region)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePaymentScheduleAsyncWithHttpInfo
     *
     * Update a gateway payment schedule.
     *
     * @param  string $contentType Content type. (required)
     * @param  string $clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param  string $apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param  int $timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param  string $orderId Gateway order identifier as returned in the parameter orderId. (required)
     * @param  \FirstData\FirstApi\Client\Model\PaymentSchedulesRequest $paymentSchedulesRequest Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest. (required)
     * @param  string $messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param  string $region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePaymentScheduleAsyncWithHttpInfo($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $paymentSchedulesRequest, $messageSignature = null, $region = null)
    {
        $returnType = '\FirstData\FirstApi\Client\Model\PaymentSchedulesResponse';
        $request = $this->updatePaymentScheduleRequest($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $paymentSchedulesRequest, $messageSignature, $region);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePaymentSchedule'
     *
     * @param  string $contentType Content type. (required)
     * @param  string $clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param  string $apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param  int $timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param  string $orderId Gateway order identifier as returned in the parameter orderId. (required)
     * @param  \FirstData\FirstApi\Client\Model\PaymentSchedulesRequest $paymentSchedulesRequest Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest. (required)
     * @param  string $messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param  string $region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updatePaymentScheduleRequest($contentType, $clientRequestId, $apiKey, $timestamp, $orderId, $paymentSchedulesRequest, $messageSignature = null, $region = null)
    {
        // verify the required parameter 'contentType' is set
        if ($contentType === null || (is_array($contentType) && count($contentType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contentType when calling updatePaymentSchedule'
            );
        }
        // verify the required parameter 'clientRequestId' is set
        if ($clientRequestId === null || (is_array($clientRequestId) && count($clientRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clientRequestId when calling updatePaymentSchedule'
            );
        }
        // verify the required parameter 'apiKey' is set
        if ($apiKey === null || (is_array($apiKey) && count($apiKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiKey when calling updatePaymentSchedule'
            );
        }
        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling updatePaymentSchedule'
            );
        }
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling updatePaymentSchedule'
            );
        }
        // verify the required parameter 'paymentSchedulesRequest' is set
        if ($paymentSchedulesRequest === null || (is_array($paymentSchedulesRequest) && count($paymentSchedulesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentSchedulesRequest when calling updatePaymentSchedule'
            );
        }

        $resourcePath = '/payment-schedules/{order-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($contentType !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($contentType);
        }
        // header params
        if ($clientRequestId !== null) {
            $headerParams['Client-Request-Id'] = ObjectSerializer::toHeaderValue($clientRequestId);
        }
        // header params
        if ($apiKey !== null) {
            $headerParams['Api-Key'] = ObjectSerializer::toHeaderValue($apiKey);
        }
        // header params
        if ($timestamp !== null) {
            $headerParams['Timestamp'] = ObjectSerializer::toHeaderValue($timestamp);
        }
        // header params
        if ($messageSignature !== null) {
            $headerParams['Message-Signature'] = ObjectSerializer::toHeaderValue($messageSignature);
        }
        // header params
        if ($region !== null) {
            $headerParams['Region'] = ObjectSerializer::toHeaderValue($region);
        }

        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'order-id' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($paymentSchedulesRequest)) {
            $_tempBody = $paymentSchedulesRequest;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
